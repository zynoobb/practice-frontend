// section 01
page - front-end 페이지 화면들
public - 사진, 아이콘 등
style - css 파일

리액트에서는 html + js 가 합쳐짐
  자바스크립트 안에 html이 들어가 있는 형태로 진행
  불러오는 것을 모두 import 로 통일 

JSX - React 전용 html // ex) div className
  html + css + js 가 합쳐진 방식

Emotion
  간결한 코드 / 태그에 의미 부여 / 코드 재사용성 증가

CSS-in-js
  emotion (styled-components의 업그레이드 버전) 사용
  styled-components

// section 02
component란?
  - UI 또는 기능을 부품화해서 재사용 가능하게 하는 것
  - 원본만 변경하면 모두 적용 가능
  - 데이터는 각 컴포넌트에 맞게 변경하여 사용 가능

component 만드는 두가지 방법
  - 클래스형 컴포넌트 (처음부터 존재, 어렵고 복잡함)
  - 함수형 컴포넌트 (클래스형이 어렵고 복잡하여 등장. 최근 많은 기업이 사용)
  => 함수형이 편리하지만, 기존 이미 만들어진 서비스들은 클래스형으로 작성되어 있을 가능성이 높으므로 알아둘 필요성 있음

React-Hooks (use로 시작하는 애들 useStates, useEffect)
  - 함수형 컴포넌트 그 자체만으로는 클래스형 컴포넌트의 모든 기능을 흉내낼 수 없음
  - 따라서 함수형 컴포넌트에서도 클래스형 컴포넌트와 동일한 기능을 사용 가능하도록 도구를 만들었는데, 이를 Hooks이라 부름
  - 대표적인 Hooks에는 useStates, useEffect가 있음

states (state, setState, useState)
  - states 란 리액트 컴포넌트에서 데이터를 담기 위한 상자 => 컴포넌트에서 사용하는 변수
  const [변수명] = 변수만드는기능(담을내용)  ==> const [classmate] = useState("철수")

// section 03
rest-api / graphql 차이 설명

// section 04
https://google.com?search=철수#aaa
uri는 전체 내용을 포함
url = https://google.com?search=철수
uri = https://google.com?search=철수#aaa

// section 05
라우팅 - 페이지 이동 // useRouter() // router.push("이동할 페이지")

옵셔널-체이닝(Optional-chaining) - data?fetchBoard
널리시-체이닝(nullish-chaining) -data??data.fetchBoard => 비어있을 시 오른쪽 것 실행
  => null || undefined

// section 06
패턴
- 컨테이너 / 프리젠테이셔널 패턴 => 과거에 자주 사용
- 훅스 패턴 (함수) => 현재 자주 사용
- 아토믹 패턴 (잘게 쪼갬 like 원자)

- 리액트의 데이터 흐름 => 단방향 (부모가 자식에게만 줄 수 있으므로)

// section 10
JSX => javascript XML
JSX이 있을 경우에는 tsx 파일로 설정
codegen => graphql 타입

// section 13
UI framework
yarn add --dev @ant-design/icons
material ui

// section 14
레이아웃 => UI 배치
font => woff2 확장자로 사용하기 => 압축률이 가장 높음
FOIT(Flash Of Invisible Text) => 안보여지고 있다가 폰트 다운로드 시 보여줌
FOUT(Flash Of Unstyled Text) => 기본 폰트로 보여준 뒤 폰트 다운로드 시 다운로드 된 폰트로 보여줌


// section 15
페이지네이션
